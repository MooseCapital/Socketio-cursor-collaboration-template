
Anything outside of io.on('connection', (socket) => { } will persist
    - but once the user disconnects, any variables inside io.on are removed

cloudfare drops connections after 100 seconds of inactivity!
    - we can try to make some logic to disconnect users when they go to new tabs
    - and connect when they move back

we can pass data on connect with query's, such as
    - const myPublicKey = socket.handshake.query?.publicKey;
    - these can be used in middleware like JWT, so we can have auth like apis
    - this could be used to connect a user to a specific room

guide to jwt auth in middleware https://stackoverflow.com/questions/36788831/authenticating-socket-io-connections-using-jwt
middleware is before the connection, so we can't listen for disconnection inside of it

cors must be an array, and we must parse it in server setup since all env variables are strings when we need an array
CORS_ORIGIN=["http://localhost:5173","http://localhost:4173","http://localhost:8888"]


there have been memory leak errors in the past due to socket.io having polling as a backup, on the client
    - only allow websocket connection upgrade, this will help things

without using any other namespace, we are still using the default path / namespace
    io.on("connection", (socket) => {});
    io.use((socket, next) => { next() });
    io.emit("hello");

are actually equivalent to this, and we just use a different path for other code separation
    const mainNamespace = io.of("/");
    mainNamespace.use((socket, next) => { next() });
    mainNamespace.on("connection", (socket) => {});
    mainNamespace.emit("hello");

volatile emits only send the most current event, since socket.io accumulates buffer events
    - when it disconnects and reconnects, it will send Every event at once to "catch up"
    - this can be a big burden on the server and unexpected behavior for the other users
    - in a game or many situations, we don't want that and only want the most up to date event
    - such as our cursor collaboration, so volatile is a good default and should be thought about
    - https://socket.io/docs/v4/emitting-events/#volatile-events

we don't need to stringify objects, it is done, we may need to parse it back for using
    // BAD
    socket.emit("hello", JSON.stringify({ name: "John" }));

    // GOOD
    socket.emit("hello", { name: "John" });


use this bcrypt to hash your admin password and store it in env
    - https://www.devglan.com/online-tools/bcrypt-hash-generator

{
  _tolFBVfsXTWPM4Qz4P3Y: {
    id: '_tolFBVfsXTWPM4Qz4P3Y',
    cursorColor: 'purple',
    cursorRGBA: 'rgba(173,144,255,0.6)',
    flag: 'ðŸ‡ºðŸ‡¸',
    countryCode: 'US',
    region: 'MS',
    socketId: '5CwcPxnguhjEXMVSAAAB'
  },
  eqrnQ5BWSMG0PGpYZOnuM: {
    id: 'eqrnQ5BWSMG0PGpYZOnuM',
    cursorColor: 'orange',
    cursorRGBA: 'rgba(255,128,0,0.6)',
    flag: 'ðŸ‡ºðŸ‡¸',
    countryCode: 'US',
    region: 'MS',
    socketId: 'yk47zd_rz9Ck5EuaAAAD'
  }
}
